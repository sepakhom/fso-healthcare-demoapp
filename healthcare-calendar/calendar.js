// App requires
var express = require("express");
morgan = require('morgan');
const bodyParser = require("body-parser");
const APP_PORT = 5050;


// Custom variable used in the CalendarService

// Add Delay to the response back to the client. 
// This is used to simulate slowness response
var addDelay = false;
// The current delay applied to the response back to the client.
var currentDelay = 0;
// Maximum delay applied to  the response back to the client
var minDelay = 0;
// Maximum delay applied to  the response back to the client
var maxDelay = 0;
// How many dates the CalendarService will generate
// Default is 5. You can set it by sending a request to /setMaxDates?days=
var howManyDates = 5;


var serviceName = "CalendarService"

require("console-stamp")(console, "ddd mmm dd yyyy HH:MM:ss");


// creating server
var app = express();
app.use(morgan('dev'));
// tell the server what port to listen on
app.listen(APP_PORT, function () {
  console.log(`${serviceName} listening on port ${APP_PORT}!`);
});




/**
 * Get the request, and generate availability dates for a given doctor
 */
app.get("/getAvailability", function (req, res) {
  console.log(serviceName + ": Incoming request from: " + req.hostname);
  availability = [];
  console.log("Looking for " + howManyDates + " availabilities...");
  try {
    for (let i = 0; i < howManyDates; i++) {
      availability.push(genDateAvailability())
    }

    availability.sort(function (a, b) {
      var dateA = new Date(a), dateB = new Date(b);
      return dateA - dateB;
    });
  } catch (err) {
    console.log(serviceName + ": Error: " + err)
    availability.length = 0;
  }


  return res.json(availability);
});

/**
 * Set delayed response back to the client
 * @returns The current delay in serving request
 */
function setDelay() {
  var currentDelay = Math.floor(
    maxDelay + (minDelay - maxDelay) * Math.random()
  );
  console.log(
    `Added delay is: ${currentDelay}, range:${minDelay}/${maxDelay} `
  );
  return currentDelay;
}

/**
 * Activate delayed response back to the client
 */
app.get("/delayOn", function (req, res) {
  console.log(
    `Adding delay as requested sir: min ${req.query.min}, max ${req.query.max}`
  );
  addDelay = true;
  minDelay = parseInt(req.query.min);
  maxDelay = parseInt(req.query.max);
  res.json({ delay: true });
});

/**
 * Deactivate delayed response back to the client
 */
app.get("/delayOff", function (req, res) {
  console.log("Removing delay as requested sir.");
  addDelay = false;
  minDelay = 0;
  maxDelay = 0;
  res.json({ delay: false });
});


/**
 * Set Maximun dates generated automatically by the CalendarService
 */
app.get("/setMaxDates", function (req, res) {
  console.log(`Setting new max date generated by CalendarService to ${req.query.days}`);
  console.log("ParseInt:" + parseInt(req.query.days))
  howManyDates = parseInt(req.query.days) || 5;
  res.write("howManyDates:" + howManyDates);
  res.end();
});




app.get("/healthz", function (req, res) {
  res.write("I'm fine");
  res.end();
});


function returnJSON(res) {
  return res.json({ service_unavailable: true });
}

function genDateAvailability() {
  var hours = ['10'];
  var date = new Date();
  date.setDate(date.getDate() + Math.floor(Math.random() * 14) + 1);
  date.setHours(Math.floor(Math.random() * (18 - 10 + 1) + 10));
  date.setMinutes(30)
  date.setSeconds(0)

  console.log(serviceName + " - Generated Date is:" + date);
  return date;
}